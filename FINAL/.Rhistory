expDesign
head(new_complete_data_set)
subset_mock_IP<-new_complete_data_set[c(3,4,5,6)]
head(subset_mock_IP)
condition<-factor(c('IP','IP','mock','mock'))
condition
head(subset_mock_IP)
cds<-newCountDataSet(subset_mock_IP,condition)
cds<-estimateSizeFactors(cds)
sizeFactors(cds)
condition=pasillaDesign$condition[pairedSamples]
cds=newCountDataSet(countTable,condition)
cds<-estimateSizeFactors(cds)
sizeFactors(cds)
subset_mock_IP<-new_complete_data_set[c(3,4,5,6)]
head(subset_mock_IP)
condition<-factor(c('IP','IP','mock','mock'))
condition_IP<-factor(c('IP','IP','mock','mock'))
condition=pasillaDesign$condition[pairedSamples]
cds=newCountDataSet(countTable,condition)
#NORMALISATION
cds<-estimateSizeFactors(cds)
sizeFactors(cds)
cds_IP<-newCountDataSet(subset_mock_IP,condition_IP)
cds_IP<-estimateSizeFactors(cds_IP)
sizeFactors(cds_IP)
head(countTable)
head(counts(cds,normalized=TRUE))
head(subset_mock_IP)
head(counts(cds_IP,normalized=TRUE))
cds = estimateDispersions(cds)
cds_IP<-estimateDispersions(cds_IP)
?estimateDispersions
cds_IP<-estimateDispersions(cds_IP,method='pooled')
cds_IP<-estimateDispersions(cds_IP,fitType='local')
head(new_complete_data_set_w0)
new_complete_data_set_w0<-new_complete_data_set-1
head(new_complete_data_set_w0)
subset_mock_IP_w0<-new_complete_data_set_w0[c(3,4,5,6)]
cds_IP_w0<-newCountDataSet(subset_mock_IP_w0,condition_IP)
cds_IP_w0<-estimateSizeFactors(cds_IP_w0)
sizeFactors(cds_IP_w0)
head(counts(cds_IP_w0,normalized=TRUE))
cds_IP_w0<-estimateDispersions(cds_IP_0,fitType='local')
cds_IP_w0<-estimateDispersions(cds_IP_w0)
cds_IP_w0<-estimateDispersions(cds_IP_w0,method='pooled')
cds_IP_w0<-estimateDispersions(cds_IP_w0,fitType='local')
str(fitInfo(cds))
plotDispEsts(cds)
plotDispEsts(cds_IP)
plotDispEsts(cds_IP_w0)
head(fData(cds_IP))
head(fData(cds_IP_w0))
variance_est_plot_w0<-pdf(variance_est_plot_w0,file='variance_est_plot_w0')
pdf(file='variance_est_plot_w0')
plotDispEsts(cds_IP_w0)
dev.off()
pdf(file='variance_est_plot_w0.pdf')
plotDispEsts(cds_IP_w0)
dev.off()
pdf(file='variance_est_plot_no0.pdf')
plotDispEsts(cds_IP)
dev.off()
condi
condition
head(cds)
head(countTable)
res<-nbinomTest(cds,'untreated',"treated")
head(res)
head(new_complete_data_set)
head(new_complete_data_set_w0)
head(cds_IP)
head(subset_mock_IP)
head(subset_mock_IP_w0)
condition
condition_IP
res_IP<-nbinomTest(cds_IP,"IP",'mock')
head(res_IP)
condition_IP
res_IP_w0<-nbinomTest(cds_IP_w0,"IP",'mock')
head(res_IP_w0)
plotMA(res)
plotMA(res_IP)
plotMA(res_IP_w0)
hist(res_IP$pval,breaks=100,col='skyblue',border='slateblue',main="")
hist(res_IP_w0$pval,breaks=100,col='skyblue',border='slateblue',main="")
?padj
?p.adj
?p.adjust
resSig_IP_w0<-res[res$padj<0.1]
resSig_IP_w0<-res[res$padj<0.1,]
resSig_IP_w0
resSig_IP_w0<-res[res_IP_w0$padj<0.1,]
resSig_IP_w0
head(resSig_IP_w0[order(resSig_IP_w0$pval,)])
head(resSig_IP_w0[order(resSig_IP_w0$pval),])
resSig_IP_w0<-res[res_IP_w0$padj<0.1,]
head(resSig_IP_w0[order(resSig_IP_w0$pval),])
resSig_IP_w0<-res_IP_w0[res_IP_w0$padj<0.1,]
head(resSig_IP_w0[order(resSig_IP_w0$pval),])
resSig_IP<-res_IP_w0[res_IP$padj<0.1,]
head(resSig_IP[order(resSig_IP$pval),])
resSig_IP<-res_IP[res_IP$padj<0.1,]
head(resSig_IP[order(resSig_IP$pval),])
new_complete_data_set<-round(complete_data_set[c(1,2,3,4,5,6)])
new_complete_data_set_w0<-new_complete_data_set-1
head(new_complete_data_set)
head(new_complete_data_set_w0)
new_complete_data_set2<-round(complete_data_set[c(1,2,5,6,3,4)])
ncu = counts( cds, normalized=TRUE )[ , conditions(cds)=="untreated" ]
plotMA(data.frame(baseMean = rowMeans(ncu),
+ log2FoldChange = log2( ncu[,2] / ncu[,1] )),
+ col = "black")
plotMA(data.frame(baseMean = rowMeans(ncu),
log2FoldChange = log2( ncu[,2] / ncu[,1] )),
col = "black")
plotMA(data.frame(baseMean = rowMeans(ncu),log2FoldChange = log2( ncu[,2] / ncu[,1] )),col = "black")
pData
?pData
pData(cds_IP)
fitInfo(cds)
head(fitInfo(cds))
fitInfo(cds)$perGeneDispEsts
?sign
source("http://bioconductor.org/biocLite.R")
biocLite("genefilter")
library(edgeR)
source("http://bioconductor.org/biocLite.R")
biocLite('edgeR')
source('~/.active-rstudio-document')
library(edgeR)
library(ggplot2)
#source("http://bioconductor.org/biocLite.R")
#biocLite('DESeq')
library(DESeq)
complete_data_set<-read.table(file="/Volumes/Magdalenas_Bigger_Boy/SEQ_DATA_2011/4_ANALYSIS_2012/5_LOCAL_ANALYSIS_Deep_SEQ_Data_Trop/Analysis/Introns/INTRONS_scatterplots/eff_counts_merged_all_xprs_files_introns_UCSC_10242014.txt", header=TRUE, stringsAsFactors = FALSE)
head(complete_data_set)
new_complete_data_set<-round(complete_data_set[c(1,2,3,4,5,6)])
head(new_complete_data_set)
names(new_complete_data_set)
#[1] "eff_counts_input1" "eff_counts_input2" "eff_counts_IP1"    "eff_counts_IP2"
deSeq_dataset<-newCountDataSet(new_complete_data_set[c(5,6,3,4)],c('cond1','cond1','cond2','cond2')) #mock 1, mock 2, IP 1, IP 2
deSeq_dataset<-estimateSizeFactors(deSeq_dataset)
deSeq_dataset<-estimateDispersions(deSeq_dataset,method='pooled',fitType='local')
de<-nbinomTest(deSeq_dataset,'cond1','cond2')
plot3<-ggplot()
plot3<-plot3+geom_point(data=de,aes(x=log10(de$baseMeanA),y=log10(de$baseMeanB)),colour=ifelse(de$pval < 0.05 & de$log2FoldChange>0,"red",ifelse(de$pval < 0.05 & de$log2FoldChange<0,'blue',"black")),alpha=0.5)
plot3+labs(title="Intron enrichment in IP fraction",x="log10(Mean effective read count -mock)",y='log10(Mean effective read count - IP)')
plot3mod<-ggplot()
plot3mod<-plot3mod+geom_point(data=de,aes(x=log10(de$baseMeanA),y=log10(de$baseMeanB),colour= de$pval < 0.05 & de$log2FoldChange>0,size = de$pval < 0.05 & de$log2FoldChange>0 ),alpha=0.5)
plot3mod<-plot3mod+scale_color_manual(name='significant',values=setNames(c('red','black'),c(TRUE,FALSE)))
plot3mod<-plot3mod+scale_size_manual(name='significant_2',values=setNames(c(4,2),c(TRUE,FALSE)))
plot3mod+labs(title="Intron enrichment in IP fraction",x="log10(Mean effective read count -mock)",y='log10(Mean effective read count - IP)')
ggsave("/Volumes/Magdalenas_Bigger_Boy/SEQ_DATA_2011/4_ANALYSIS_2012/5_LOCAL_ANALYSIS_Deep_SEQ_Data_Trop/Analysis/Introns/INTRONS_scatterplots/RH_2.png")
1.5*14
460/25
32000/80
3.2e6
3.2e6/2e5
(2e5)/15000
2e5*34
374/80
352/80
2000/2.5
1000/50
1000/10
2.5*342
855*0.2
200/100
200/20
200/800
1000/50
200/20
1.25*75
93.75*10/1000
390+380
7000+770
/16
7770/16
25/0.5
10/50
0.25*342
25/0.5
40/50
100/37
600/37
200/37
237/10
30/0.1
130/300
130*8
1040/300
0.9*800/24
800/30
10-0.08-2-0.4-0.5-0.2
10-0.08-2-5-0.5-0.2
9.25+9.25
9.25+9.25+192.20+2+37
350*0.37
350/37
350+3500
3850/16
3850+3850/16
2000/250
4091/8
25/0.5
460/50
4600/50
200/25
2000/8
50/55
5/50
55/50
50*1.4
50/12
2**5
2**6
64*10
0.08*9
0.2*9
6.82*9
2.2*9
20*1.1
30/5
30-0.4-6-0.2-0.4-20
0.5+0.2+5+2.2+2+0.08
50/12
20/4.1666
20-0.5-4.8-1
20-0.5-4-0.4-0.4-1
20-0.5-4-0.4-0.4-1
20-0.5-4.8-1
vvnv b zxcxzzxxcvbnxzcvbnmvbnerfgrtft5rfwq34eu7i8oy6htyujkm,./m,
30*0.
30*0.6
30*1.3
39-18
1e-12
1e-3
(1e-12)*0.0051
(1e-12)*0.0051*(1e-6)
(1e-12)*0.0051/(1e-6)
(1e-12)*0.0076/(1e-6)
300/8
1528/2001
473/2001
1528/2001/2
chisq.test(c(886,642,441,32),p=c(0.38,0.38,0.12,0.12))
library(ggplot2)
mtcars
head(mtcars)
unique(mtcars$vs)
unique(mtcars$am)
length(mtcars)
dim(mtcars)
names(mtcars)
names(mtcars[,1])
(mtcars[,1])
(mtcars[,1].name)
(name(mtcars[,1]))
?mean
?multiplot
# Multiple plot function
#
# ggplot objects can be passed in ..., or to plotlist (as a list of ggplot objects)
# - cols:   Number of columns in layout
# - layout: A matrix specifying the layout. If present, 'cols' is ignored.
#
# If the layout is something like matrix(c(1,2,3,3), nrow=2, byrow=TRUE),
# then plot 1 will go in the upper left, 2 will go in the upper right, and
# 3 will go all the way across the bottom.
#
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
require(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
?list
list(50)
list()
plot_list=list()
for (i in 1:length(dfo_no_CAT_NUM)){
#print(mean(dfo_no_CAT_NUM[,i],na.rm=TRUE))
[[i]]<-i
}
biocLite()
?biocLite
??biocLite
source("http://bioconductor.org/biocLite.R")
0.168/2
1600/400
200/80
25/0.1
500/250
300/500
300/200
100/80
90/80
90/80/2
20*40*16
20*40
13.6*0.4/24.5
50*0.6
40*1.8
27*1.1
27*1.2
27*1.4
1.3*50
1.3*50-25
1.1*50-25
0.6*50
0.7*50
0.7*20
0.6*20
1.1*50
install.packages("ParallelForest")
library(parallel)
-10*log10(0.05)
10**(-2.8)
-10*log10(0.002)
-10*log10(0.005)
?pi
pi*2
107891+22025
2701600+1073655
115339+26457
2811384+1182119
library(RIPSeeker)
library(RIPSeeker)
library(edgeR)
2**8
log2(100)
getwd()
setwd("/Volumes/Magdalena_NEW1/ZOO_DATA/Zoo Data/FINAL")
original<-read.csv('original.csv',stringsAsFactors=FALSE)
setwd("/Volumes/Magdalena_NEW1/ZOO_DATA/Zoo Data/FINAL")
original<-read.csv('original.csv',stringsAsFactors=FALSE)
original.SQL<-read.csv('../SEPTEMBER_2014/df2_original_for_SQL.csv',stringsAsFactors=FALSE)
new_cols<-c("#F8766D","#00B0F6","#FF6A98","#35A2FF","#C09B00","#E76BF3","#EA8331","#7CAE00","#9590FF","#39B600","#A3A500","#00BB4E","#FF62BC","#00BAE0","#00C1A3","#FA62DB","#00BF7D","#D89000","#00BAE0","#C77CFF")
my_labels=unique(original$organism)
mapping_vector2<-setNames(object=as.character(new_cols),nm=my_labels)
original.SQL.met<-original.SQL[(original.SQL$stage == 'm' | original.SQL$stage=='mI' | original.SQL$stage=='mII'),]
original.SQL.met.mit<-original.SQL.met[which(original.SQL.met$meiotic==0),]
setwd("/Volumes/Magdalena_NEW1/ZOO_DATA/Zoo Data/FINAL")
original<-read.csv('original.csv',stringsAsFactors=FALSE)
original.SQL<-read.csv('../SEPTEMBER_2014/df2_original_for_SQL.csv',stringsAsFactors=FALSE)
new_cols<-c("#F8766D","#00B0F6","#FF6A98","#35A2FF","#C09B00","#E76BF3","#EA8331","#7CAE00","#9590FF","#39B600","#A3A500","#00BB4E","#FF62BC","#00BAE0","#00C1A3","#FA62DB","#00BF7D","#D89000","#00BAE0","#C77CFF")
my_labels=unique(original$organism)
mapping_vector2<-setNames(object=as.character(new_cols),nm=my_labels)
original.SQL.met<-original.SQL[(original.SQL$stage == 'm' | original.SQL$stage=='mI' | original.SQL$stage=='mII'),]
original.SQL.met.mit<-original.SQL.met[which(original.SQL.met$meiotic==0),]
mult_of_2<-function(x){
#Tests for divisibility by 2.
#
#Args: x - value to be tested (numeric or integer)
#
#Returns x if x is divisible by 10. If not, returns first value larger than x, which is divisible by 10.
if (ceiling(x) %% 2 == 0){
return(x)
}
else {
while (ceiling(x) %%2 !=0){
x<-ceiling(x)+1
if (x %% 2 == 0){
return(x)
break
}
}
}
}
break_number<-function(var_x){
#USES mult_of_2()
#1. initiate
from=mult_of_2(min(var_x, na.rm=TRUE))
to=mult_of_2(max(var_x, na.rm=TRUE))
breaks<-seq(from=from, to=to,by=2)
#2. check whether the marginal vectors
if ((sum(var_x<=min(breaks),na.rm=TRUE)>3) & (sum(var_x>=max(breaks),na.rm=TRUE)>3)){
return(breaks)
}
if (sum(var_x<=min(breaks),na.rm=TRUE)<3){
while (sum(var_x<=min(breaks),na.rm=TRUE)<3){
from = from + 2
breaks<-seq(from=from, to=to, by=2)
}
}
if (sum(var_x>=max(breaks),na.rm=TRUE)<3){
while (sum(var_x>=max(breaks),na.rm=TRUE)<3){
to = to - 2
breaks<-seq(from=from, to=to,by=2)
}
}
return(ceiling(breaks))
}
piecewise_reg<-function(data_frame, x, y){
breaks<-break_number(data_frame[,x])
sigma<-vector(mode='numeric',length=length(breaks))
AIC<-vector(mode='numeric',length=length(breaks))
BIC<-vector(mode='numeric',length=length(breaks))
for (i in 1:length(breaks)){
model<-lm(data_frame[,y] ~ (data_frame[,x]<breaks[i])*data_frame[,x] + (data_frame[,x]>breaks[i])*data_frame[,x])
sigma[i]<-summary(model)$sigma #c(sigma=model$sigma,AIC=AIC(model))
AIC[i]<-AIC(model)#c(sigma=model$sigma,AIC=AIC(model))
BIC[i]<-BIC(model)
}
result = list(breaks=breaks,sigma=sigma, AIC=AIC, BIC=BIC)
return(result)
}
plotter<-function(list_of_models){
#Saves batch generated plots
for (i in 1:length(list_of_models)){
plot<-ggplot(data=as.data.frame(rs[[i]]))+geom_line(aes(x=breaks,y=AIC),size=1,col=mapping_vector2[names(rs)[[i]]])
ggsave(filename=paste(i,'_PR_AIC_',names(rs)[[i]],'.pdf',sep=''),plot=plot)
}
}
###############################################################################################
#INDIVIDUAL ORGANISMS
###############################################################################################
rows_per_org<-by(original.SQL.met.mit, original.SQL.met.mit$organism, function(x){dim(x)}[1])
rows_per_org[rows_per_org>6]
row.names(cbind(rows_per_org[rows_per_org>6]))
row.names(cbind(rows_per_org[rows_per_org<6]))
row.names(cbind(rows_per_org[rows_per_org>6]))
subset_doable=original.SQL.met.mit[original.SQL.met.mit$organism %in% row.names(cbind(rows_per_org[rows_per_org>6])),]
print(dim(subset_doable))
print(dim(original.SQL.met.mit[!original.SQL.met.mit$organism %in% row.names(cbind(rows_per_org[rows_per_org>6])),]))
by(subset_doable, subset_doable$organism, function(x) break_number(x[,'cell_diameter_um']))
rs<-by(subset_doable, subset_doable$organism, function(x) piecewise_reg(x,'cell_diameter_um','spindle_length_poles_um'))
library(ggplot2)
plotter<-function(list_of_models){
#Saves batch generated plots
for (i in 1:length(list_of_models)){
plot<-ggplot(data=as.data.frame(rs[[i]]))+geom_line(aes(x=breaks,y=ceiling(AIC)),size=1,col=mapping_vector2[names(rs)[[i]]])
ggsave(filename=paste(i,'_PR_AIC_',names(rs)[[i]],'.pdf',sep=''),plot=plot)
}
}
plotter(rs)
#ALL ORGANISMS
pr.cell_diam.sp_len.p2p=piecewise_reg(original.SQL.met.mit,'cell_diameter_um','spindle_length_poles_um')
ggplot(data=as.data.frame(pr.cell_diam.sp_len.p2p))+geom_line(aes(x=breaks,y=ceiling(AIC)),colour='black',size=1)
ggsave(ggplot(data=as.data.frame(pr.cell_diam.sp_len.p2p))+geom_line(aes(x=breaks,y=ceiling(AIC)),colour='black',size=1),filename='0_PR_AIC_ALL.pdf')
ggplot(data=original.SQL.met.mit)+geom_point(aes(y=log2(spindle_length_poles_um),x=log2(cell_diameter_um),colour=organism),alpha=0.7)+scale_color_manual(values=mapping_vector2,labels=names(mapping_vector2))
ggplot(data=original.SQL.met.mit)+geom_point(aes(y=log2(spindle_length_poles_um),x=log2(cell_diameter_um),colour=organism),alpha=0.8)+scale_color_manual(values=mapping_vector2,labels=names(mapping_vector2))
ggplot(data=original.SQL.met.mit)+geom_point(aes(y=log2(spindle_length_poles_um),x=log2(cell_diameter_um),colour=organism),alpha=0.9)+scale_color_manual(values=mapping_vector2,labels=names(mapping_vector2))
ggsave(ggplot(data=original.SQL.met.mit)+geom_point(aes(y=log2(spindle_length_poles_um),x=log2(cell_diameter_um),colour=organism),alpha=0.9)+scale_color_manual(values=mapping_vector2,labels=names(mapping_vector2)),filename+'0_log_log_p2p_cd.pdf')
ggsave(ggplot(data=original.SQL.met.mit)+geom_point(aes(y=log2(spindle_length_poles_um),x=log2(cell_diameter_um),colour=organism),alpha=0.9)+scale_color_manual(values=mapping_vector2,labels=names(mapping_vector2)),filename='0_log_log_p2p_cd.pdf')
ggplot(data=original.SQL.met.mit)+geom_point(aes(y=log2(spindle_length__asters_um),x=log2(cell_diameter_um),colour=organism),alpha=0.9)+scale_color_manual(values=mapping_vector2,labels=names(mapping_vector2))
ggplot(data=original.SQL.met.mit)+geom_point(aes(y=log2(spindle_length_poles_um),x=log2(cell_diameter_um),colour=organism),alpha=0.9)+scale_color_manual(values=mapping_vector2,labels=names(mapping_vector2))
ggplot(data=original.SQL.met.mit)+geom_point(aes(y=log2(spindle_length__asters_um),x=log2(cell_diameter_um),colour=organism),alpha=0.9)+scale_color_manual(values=mapping_vector2,labels=names(mapping_vector2))
2**10
ggplot(data=original.SQL.met.mit)+geom_point(aes(y=log2(spindle_length_poles_um),x=log2(cell_diameter_um),colour=organism),alpha=0.9)+scale_color_manual(values=mapping_vector2,labels=names(mapping_vector2))
ggplot(data=original.SQL.met.mit)+geom_point(aes(y=log2(spindle_length__asters_um),x=log2(cell_diameter_um),colour=organism),alpha=0.9)+scale_color_manual(values=mapping_vector2,labels=names(mapping_vector2))
2**12
2**11
2**10
log2(1600)
ggplot(data=original.SQL.met.mit)+geom_point(aes(y=log2(spindle_length_poles_um),x=log2(cell_diameter_um),colour=organism),alpha=0.9)+scale_color_manual(values=mapping_vector2,labels=names(mapping_vector2))+xlim(c(1,log2(1600)))
ggplot(data=original.SQL.met.mit)+geom_point(aes(y=log2(spindle_length_poles_um),x=log2(cell_diameter_um),colour=organism),alpha=0.9)+scale_color_manual(values=mapping_vector2,labels=names(mapping_vector2))+xlim(c(1,log2(1800)))
ggplot(data=original.SQL.met.mit)+geom_point(aes(y=log2(spindle_length_poles_um),x=log2(cell_diameter_um),colour=organism),alpha=0.9)+scale_color_manual(values=mapping_vector2,labels=names(mapping_vector2))+xlim(c(1,log2(1900)))
ggplot(data=original.SQL.met.mit)+geom_point(aes(y=log2(spindle_length_poles_um),x=log2(cell_diameter_um),colour=organism),alpha=0.9)+scale_color_manual(values=mapping_vector2,labels=names(mapping_vector2))#+xlim(c(1,log2(1900)))
ggplot(data=original.SQL.met.mit)+geom_point(aes(y=log2(spindle_length_poles_um),x=log2(cell_diameter_um),colour=organism),alpha=0.9)+scale_color_manual(values=mapping_vector2,labels=names(mapping_vector2))+xlim(c(1,log2(2000)))
ggplot(data=original.SQL.met.mit)+geom_point(aes(y=log2(spindle_length_poles_um),x=log2(cell_diameter_um),colour=organism),alpha=0.9)+scale_color_manual(values=mapping_vector2,labels=names(mapping_vector2))+xlim(c(1,log2(3000)))
ggplot(data=original.SQL.met.mit)+geom_point(aes(y=log2(spindle_length_poles_um),x=log2(cell_diameter_um),colour=organism),alpha=0.9)+scale_color_manual(values=mapping_vector2,labels=names(mapping_vector2))+xlim(c(1,log2(2500)))
ggplot(data=original.SQL.met.mit)+geom_point(aes(y=log2(spindle_length_poles_um),x=log2(cell_diameter_um),colour=organism),alpha=0.9)+scale_color_manual(values=mapping_vector2,labels=names(mapping_vector2))+xlim(c(1,log2(2600)))
ggplot(data=original.SQL.met.mit)+geom_point(aes(y=log2(spindle_length_poles_um),x=log2(cell_diameter_um),colour=organism),alpha=0.9)+scale_color_manual(values=mapping_vector2,labels=names(mapping_vector2))+xlim(c(1,log2(2000)))
ggplot(data=original.SQL.met.mit)+geom_point(aes(y=log2(spindle_length__asters_um),x=log2(cell_diameter_um),colour=organism),alpha=0.9)+scale_color_manual(values=mapping_vector2,labels=names(mapping_vector2))+xlim(c(1,log2(2000)))
ggplot(data=original.SQL.met.mit)+geom_point(aes(y=log2(spindle_length_poles_um),x=log2(cell_diameter_um),colour=organism),alpha=0.9)+scale_color_manual(values=mapping_vector2,labels=names(mapping_vector2))+xlim(c(0,log2(2000)))#+ylim(c)
ggplot(data=original.SQL.met.mit)+geom_point(aes(y=log2(spindle_length_poles_um),x=log2(cell_diameter_um),colour=organism),alpha=0.9)+scale_color_manual(values=mapping_vector2,labels=names(mapping_vector2))#+xlim(c(0,log2(2000)))#+ylim(c)
ggplot(data=original.SQL.met.mit)+geom_point(aes(y=log2(spindle_length__asters_um),x=log2(cell_diameter_um),colour=organism),alpha=0.9)+scale_color_manual(values=mapping_vector2,labels=names(mapping_vector2))#+xlim(c(1,log2(2000)))
ggplot(data=original.SQL.met.mit)+geom_point(aes(y=log2(spindle_length__asters_um),x=log2(cell_diameter_um),colour=organism),alpha=0.9)+scale_color_manual(values=mapping_vector2,labels=names(mapping_vector2))#+xlim(c(1,log2(2000)))
ggplot(data=original.SQL.met.mit)+geom_point(aes(y=log2(spindle_length_poles_um),x=log2(cell_diameter_um),colour=organism),alpha=0.9)+scale_color_manual(values=mapping_vector2,labels=names(mapping_vector2))#+xlim(c(0,log2(2000)))#+ylim(c)
ggplot(data=original.SQL.met.mit)+geom_point(aes(y=log2(spindle_length_poles_um),x=log2(cell_diameter_um),colour=organism),alpha=0.9)+scale_color_manual(values=mapping_vector2,labels=names(mapping_vector2))+ylim(0,log2(2**7))
ggplot(data=original.SQL.met.mit)+geom_point(aes(y=log2(spindle_length_poles_um),x=log2(cell_diameter_um),colour=organism),alpha=0.9)+scale_color_manual(values=mapping_vector2,labels=names(mapping_vector2))+ylim(0,log2(2**7.5))
ggplot(data=original.SQL.met.mit)+geom_point(aes(y=log2(spindle_length_poles_um),x=log2(cell_diameter_um),colour=organism),alpha=0.9)+scale_color_manual(values=mapping_vector2,labels=names(mapping_vector2))+ylim(1,log2(2**7.5))
ggplot(data=original.SQL.met.mit)+geom_point(aes(y=log2(spindle_length__asters_um),x=log2(cell_diameter_um),colour=organism),alpha=0.9)+scale_color_manual(values=mapping_vector2,labels=names(mapping_vector2))+ylim(1,log2(2**7.5))
ggplot(data=original.SQL.met.mit)+geom_point(aes(y=log2(spindle_length__asters_um),x=log2(cell_diameter_um),colour=organism),alpha=0.9)+scale_color_manual(values=mapping_vector2,labels=names(mapping_vector2))#+ylim(1,log2(2**7.5))
ggplot(data=original.SQL.met.mit)+geom_point(aes(y=log2(spindle_length__asters_um),x=log2(cell_diameter_um),colour=organism),alpha=0.9)+scale_color_manual(values=mapping_vector2,labels=names(mapping_vector2))+ylim(1,log2(2**7.5))
ggplot(data=original.SQL.met.mit)+geom_point(aes(y=log2(spindle_length_poles_um),x=log2(cell_diameter_um),colour=organism),alpha=0.9)+scale_color_manual(values=mapping_vector2,labels=names(mapping_vector2))+ylim(1,log2(2**7.5))
ggplot(data=original.SQL.met.mit)+geom_point(aes(y=log2(spindle_length__asters_um),x=log2(cell_diameter_um),colour=organism),alpha=0.9)+scale_color_manual(values=mapping_vector2,labels=names(mapping_vector2))+ylim(1,log2(2**7.0))
ggplot(data=original.SQL.met.mit)+geom_point(aes(y=log2(spindle_length__asters_um),x=log2(cell_diameter_um),colour=organism),alpha=0.9)+scale_color_manual(values=mapping_vector2,labels=names(mapping_vector2))+ylim(1,log2(2**7.2))
ggplot(data=original.SQL.met.mit)+geom_point(aes(y=log2(spindle_length_poles_um),x=log2(cell_diameter_um),colour=organism),alpha=0.9)+scale_color_manual(values=mapping_vector2,labels=names(mapping_vector2))+ylim(1,log2(2**7.2))
ggsave(ggplot(data=original.SQL.met.mit)+geom_point(aes(y=log2(spindle_length_poles_um),x=log2(cell_diameter_um),colour=organism),alpha=0.9)+scale_color_manual(values=mapping_vector2,labels=names(mapping_vector2))+ylim(1,log2(2**7.2),filename='0_log_log_p2p_cd.pdf')
)
ggsave(ggplot(data=original.SQL.met.mit)+geom_point(aes(y=log2(spindle_length_poles_um),x=log2(cell_diameter_um),colour=organism),alpha=0.9)+scale_color_manual(values=mapping_vector2,labels=names(mapping_vector2))+ylim(1,log2(2**7.2)),filename='0_log_log_p2p_cd.pdf')
ggsave(ggplot(data=original.SQL.met.mit)+geom_point(aes(y=log2(spindle_length__asters_um),x=log2(cell_diameter_um),colour=organism),alpha=0.9)+scale_color_manual(values=mapping_vector2,labels=names(mapping_vector2))+ylim(1,log2(2**7.2)),filename='0_log_log_a2a_cd.pdf')
2**10
?RSS
?anova
?lines

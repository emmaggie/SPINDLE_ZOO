}
files
?grep
library(ggplot2)
library(DESeq)
complete_data_set<-read.table(file="/Volumes/Magdalenas_Bigger_Boy/SEQ_DATA_2011/4_ANALYSIS_2012/5_LOCAL_ANALYSIS_Deep_SEQ_Data_Trop/Analysis/Introns/INTRONS_scatterplots/eff_counts_merged_all_xprs_files_introns_UCSC_10242014.txt", header=TRUE, stringsAsFactors = FALSE)
head(complete_data_set)
new_complete_data_set<-round(complete_data_set[c(1,2,3,4,5,6)])
head(new_complete_data_set)
names(new_complete_data_set)
deSeq_dataset<-newCountDataSet(new_complete_data_set[c(5,6,3,4)],c('cond1','cond1','cond2','cond2')) #mock 1, mock 2, IP 1, IP 2
deSeq_dataset<-estimateSizeFactors(deSeq_dataset)
deSeq_dataset<-estimateDispersions(deSeq_dataset,method='pooled',fitType='local')
plot3<-ggplot()
plot3<-ggplot()
plot3<-plot3+geom_point(data=de,aes(x=log10(de$baseMeanA),y=log10(de$baseMeanB)),colour=ifelse(de$pval < 0.05 & de$log2FoldChange>0,"red",ifelse(de$pval < 0.05 & de$log2FoldChange<0,'blue',"black")),alpha=0.5)
de
de<-nbinomTest(deSeq_dataset,'cond1','cond2')
plot3<-ggplot()
plot3<-plot3+geom_point(data=de,aes(x=log10(de$baseMeanA),y=log10(de$baseMeanB)),colour=ifelse(de$pval < 0.05 & de$log2FoldChange>0,"red",ifelse(de$pval < 0.05 & de$log2FoldChange<0,'blue',"black")),alpha=0.5)
plot3+labs(title="Intron enrichment in IP fraction",x="log10(Mean effective read count -mock)",y='log10(Mean effective read count - IP)')
plot3mod<-ggplot()
plot3mod<-plot3+geom_point(data=de,aes(x=log10(de$baseMeanA),y=log10(de$baseMeanB)),colour=ifelse(de$pval < 0.05 & de$log2FoldChange>0,"red","black")),alpha=0.5)
plot3mod<-ggplot()
plot3mod<-plot3+geom_point(data=de,aes(x=log10(de$baseMeanA),y=log10(de$baseMeanB)),colour=ifelse(de$pval < 0.05 & de$log2FoldChange>0,"red","black"),alpha=0.5)
plot3+labs(title="Intron enrichment in IP fraction",x="log10(Mean effective read count -mock)",y='log10(Mean effective read count - IP)')
plot3mod<-ggplot()
plot3mod<-plot3+geom_point(data=de,aes(x=log10(de$baseMeanA),y=log10(de$baseMeanB)),colour=ifelse(de$pval < 0.05 & de$log2FoldChange>0,"red","black"),alpha=0.5)
plot3mod+labs(title="Intron enrichment in IP fraction",x="log10(Mean effective read count -mock)",y='log10(Mean effective read count - IP)')
plot3<-ggplot()
plot3mod<-ggplot()
plot3mod<-plot3mod+geom_point(data=de,aes(x=log10(de$baseMeanA),y=log10(de$baseMeanB)),colour=ifelse(de$pval < 0.05 & de$log2FoldChange>0,"red","black"),alpha=0.5)
plot3mod+labs(title="Intron enrichment in IP fraction",x="log10(Mean effective read count -mock)",y='log10(Mean effective read count - IP)')
plot3mod<-ggplot()
plot3mod<-plot3mod++scale_color_manual(name='significant',values=setNames(c('red','black'),c(TRUE,FALSE)))
plot3mod<-ggplot()
plot3mod<-plot3mod+geom_point(data=de,aes(x=log10(de$baseMeanA),y=log10(de$baseMeanB)),colour=ifelse(de$pval < 0.05 & de$log2FoldChange>0),alpha=0.5)
plot3mod<-ggplot()
plot3mod<-plot3mod+geom_point(data=de,aes(x=log10(de$baseMeanA),y=log10(de$baseMeanB)),colour=ifelse(de$pval < 0.05 & de$log2FoldChange>0,'red'),alpha=0.5)
plot3mod<-ggplot()
plot3mod<-plot3mod+geom_point(data=de,aes(x=log10(de$baseMeanA),y=log10(de$baseMeanB)),colour= (de$pval < 0.05) & (de$log2FoldChange>0)),alpha=0.5)
plot3mod<-ggplot()
plot3mod<-plot3mod+geom_point(data=de,aes(x=log10(de$baseMeanA),y=log10(de$baseMeanB)),colour= (de$pval < 0.05) & (de$log2FoldChange>0),alpha=0.5)
plot3mod<-plot3mod++scale_color_manual(name='significant',values=setNames(c('red','black'),c(TRUE,FALSE)))
plot3mod<-ggplot()
plot3mod<-plot3mod+geom_point(data=de,aes(x=log10(de$baseMeanA),y=log10(de$baseMeanB)),colour= de$pval < 0.05 & de$log2FoldChange>0,alpha=0.5)
plot3mod<-plot3mod++scale_color_manual(name='significant',values=setNames(c('red','black'),c(TRUE,FALSE)))
plot3mod<-plot3mod+scale_color_manual(name='significant',values=setNames(c('red','black'),c(TRUE,FALSE)))
plot3mod+labs(title="Intron enrichment in IP fraction",x="log10(Mean effective read count -mock)",y='log10(Mean effective read count - IP)')
plot3mod<-ggplot()
plot3mod<-plot3mod+geom_point(data=de,aes(x=log10(de$baseMeanA),y=log10(de$baseMeanB),colour= de$pval < 0.05 & de$log2FoldChange>0),alpha=0.5)
plot3mod<-plot3mod+scale_color_manual(name='significant',values=setNames(c('red','black'),c(TRUE,FALSE)))
plot3mod+labs(title="Intron enrichment in IP fraction",x="log10(Mean effective read count -mock)",y='log10(Mean effective read count - IP)')
plot3mod<-ggplot()
plot3mod<-plot3mod+geom_point(data=de,aes(x=log10(de$baseMeanA),y=log10(de$baseMeanB),colour= de$pval < 0.05 & de$log2FoldChange>0,size = de$pval < 0.05 & de$log2FoldChange>0 ),alpha=0.5)
plot3mod<-plot3mod+scale_color_manual(name='significant',values=setNames(c('red','black'),c(TRUE,FALSE)))
plot3mod<-plot3mod+scale_size_manual(name='significant',values=setNames(c(1,4),c(TRUE,FALSE)))
plot3mod+labs(title="Intron enrichment in IP fraction",x="log10(Mean effective read count -mock)",y='log10(Mean effective read count - IP)')
plot3mod<-ggplot()
plot3mod<-plot3mod+geom_point(data=de,aes(x=log10(de$baseMeanA),y=log10(de$baseMeanB),colour= de$pval < 0.05 & de$log2FoldChange>0,size = de$pval < 0.05 & de$log2FoldChange>0 ),alpha=0.5)
plot3mod<-plot3mod+scale_color_manual(name='significant',values=setNames(c('red','black'),c(TRUE,FALSE)))
plot3mod<-plot3mod+scale_size_manual(name='significant',values=setNames(c(4,2),c(TRUE,FALSE)))
plot3mod+labs(title="Intron enrichment in IP fraction",x="log10(Mean effective read count -mock)",y='log10(Mean effective read count - IP)')
plot3mod<-ggplot()
plot3mod<-plot3mod+geom_point(data=de,aes(x=log10(de$baseMeanA),y=log10(de$baseMeanB),colour= de$pval < 0.05 & de$log2FoldChange>0,size = de$pval < 0.05 & de$log2FoldChange>0 ),alpha=0.5)
plot3mod<-plot3mod+scale_color_manual(name='significant',values=setNames(c('red','black'),c(TRUE,FALSE)))
plot3mod<-plot3mod+scale_size_manual(name='significant',values=setNames(c(3,2),c(TRUE,FALSE)))
plot3mod+labs(title="Intron enrichment in IP fraction",x="log10(Mean effective read count -mock)",y='log10(Mean effective read count - IP)')
plot3mod<-ggplot()
plot3mod<-plot3mod+geom_point(data=de,aes(x=log10(de$baseMeanA),y=log10(de$baseMeanB),colour= de$pval < 0.05 & de$log2FoldChange>0,size = de$pval < 0.05 & de$log2FoldChange>0 ),alpha=0.5)
plot3mod<-plot3mod+scale_color_manual(name='significant',values=setNames(c('red','black'),c(TRUE,FALSE)))
plot3mod<-plot3mod+scale_size_manual(name='significant_2',values=setNames(c(3,2),c(TRUE,FALSE)))
plot3mod+labs(title="Intron enrichment in IP fraction",x="log10(Mean effective read count -mock)",y='log10(Mean effective read count - IP)')
ggsave("/Volumes/Magdalenas_Bigger_Boy/SEQ_DATA_2011/4_ANALYSIS_2012/5_LOCAL_ANALYSIS_Deep_SEQ_Data_Trop/Analysis/Introns/INTRONS_scatterplots/RH.png)
""
)
)
)))))
"
ggsave("/Volumes/Magdalenas_Bigger_Boy/SEQ_DATA_2011/4_ANALYSIS_2012/5_LOCAL_ANALYSIS_Deep_SEQ_Data_Trop/Analysis/Introns/INTRONS_scatterplots/RH.png")
plot3mod<-ggplot()
plot3mod<-plot3mod+geom_point(data=de,aes(x=log10(de$baseMeanA),y=log10(de$baseMeanB),colour= de$pval < 0.05 & de$log2FoldChange>0,size = de$pval < 0.05 & de$log2FoldChange>0 ),alpha=0.5)
plot3mod<-plot3mod+scale_color_manual(name='significant',values=setNames(c('red','black'),c(TRUE,FALSE)))
plot3mod<-plot3mod+scale_size_manual(name='significant_2',values=setNames(c(4,2),c(TRUE,FALSE)))
plot3mod+labs(title="Intron enrichment in IP fraction",x="log10(Mean effective read count -mock)",y='log10(Mean effective read count - IP)')
ggsave("/Volumes/Magdalenas_Bigger_Boy/SEQ_DATA_2011/4_ANALYSIS_2012/5_LOCAL_ANALYSIS_Deep_SEQ_Data_Trop/Analysis/Introns/INTRONS_scatterplots/RH_2.png")
ggsave("/Volumes/Magdalenas_Bigger_Boy/SEQ_DATA_2011/4_ANALYSIS_2012/5_LOCAL_ANALYSIS_Deep_SEQ_Data_Trop/Analysis/Introns/INTRONS_scatterplots/RH_2.pdf")
datafile<-system.file("extdata/pasilla_gene_counts.tsv", package="pasilla")
datafile
datafile = system.file( "extdata/pasilla_gene_counts.tsv", package="pasilla" )
datafile
source("http://bioconductor.org/biocLite.R")
biocLite("pasilla")
datafile = system.file( "extdata/pasilla_gene_counts.tsv", package="pasilla" )
datafile
pasillaCountTable = read.table( datafile, header=TRUE, row.names=1 )
head(pasillaCountTable)
new_complete_data_set<-round(complete_data_set[c(1,2,3,4,5,6)])
new_complete_data_set
head(new_complete_data_set)
expDesign<-data.frame(row.names=colnames(new_complete_data_set),condition=c('input','input','IP','IP','mock','mock'),libType=c('single-end','single-end','single-end','single-end','single-end','single-end')) #technical details
pasillaDesign = data.frame(
row.names = colnames( pasillaCountTable ),
condition = c( "untreated", "untreated", "untreated",
"untreated", "treated", "treated", "treated" ),
libType = c( "single-end", "single-end", "paired-end",
"paired-end", "single-end", "paired-end", "paired-end" ) )
pasillaDesign
pairedSamples=pasillaDesign$libType=='paired-end'
pairedSamples
countTable=pasillaCountTable[,pairedSamples]
head(countTable)
condition=pasillaDesign$condition[pairedSamples]
condition
library('DESeq')
cds=newCountDataSet(countTable,condition)
expDesign
head(new_complete_data_set)
subset_mock_IP<-new_complete_data_set[c(3,4,5,6)]
head(subset_mock_IP)
condition<-factor(c('IP','IP','mock','mock'))
condition
head(subset_mock_IP)
cds<-newCountDataSet(subset_mock_IP,condition)
cds<-estimateSizeFactors(cds)
sizeFactors(cds)
condition=pasillaDesign$condition[pairedSamples]
cds=newCountDataSet(countTable,condition)
cds<-estimateSizeFactors(cds)
sizeFactors(cds)
subset_mock_IP<-new_complete_data_set[c(3,4,5,6)]
head(subset_mock_IP)
condition<-factor(c('IP','IP','mock','mock'))
condition_IP<-factor(c('IP','IP','mock','mock'))
condition=pasillaDesign$condition[pairedSamples]
cds=newCountDataSet(countTable,condition)
#NORMALISATION
cds<-estimateSizeFactors(cds)
sizeFactors(cds)
cds_IP<-newCountDataSet(subset_mock_IP,condition_IP)
cds_IP<-estimateSizeFactors(cds_IP)
sizeFactors(cds_IP)
head(countTable)
head(counts(cds,normalized=TRUE))
head(subset_mock_IP)
head(counts(cds_IP,normalized=TRUE))
cds = estimateDispersions(cds)
cds_IP<-estimateDispersions(cds_IP)
?estimateDispersions
cds_IP<-estimateDispersions(cds_IP,method='pooled')
cds_IP<-estimateDispersions(cds_IP,fitType='local')
head(new_complete_data_set_w0)
new_complete_data_set_w0<-new_complete_data_set-1
head(new_complete_data_set_w0)
subset_mock_IP_w0<-new_complete_data_set_w0[c(3,4,5,6)]
cds_IP_w0<-newCountDataSet(subset_mock_IP_w0,condition_IP)
cds_IP_w0<-estimateSizeFactors(cds_IP_w0)
sizeFactors(cds_IP_w0)
head(counts(cds_IP_w0,normalized=TRUE))
cds_IP_w0<-estimateDispersions(cds_IP_0,fitType='local')
cds_IP_w0<-estimateDispersions(cds_IP_w0)
cds_IP_w0<-estimateDispersions(cds_IP_w0,method='pooled')
cds_IP_w0<-estimateDispersions(cds_IP_w0,fitType='local')
str(fitInfo(cds))
plotDispEsts(cds)
plotDispEsts(cds_IP)
plotDispEsts(cds_IP_w0)
head(fData(cds_IP))
head(fData(cds_IP_w0))
variance_est_plot_w0<-pdf(variance_est_plot_w0,file='variance_est_plot_w0')
pdf(file='variance_est_plot_w0')
plotDispEsts(cds_IP_w0)
dev.off()
pdf(file='variance_est_plot_w0.pdf')
plotDispEsts(cds_IP_w0)
dev.off()
pdf(file='variance_est_plot_no0.pdf')
plotDispEsts(cds_IP)
dev.off()
condi
condition
head(cds)
head(countTable)
res<-nbinomTest(cds,'untreated',"treated")
head(res)
head(new_complete_data_set)
head(new_complete_data_set_w0)
head(cds_IP)
head(subset_mock_IP)
head(subset_mock_IP_w0)
condition
condition_IP
res_IP<-nbinomTest(cds_IP,"IP",'mock')
head(res_IP)
condition_IP
res_IP_w0<-nbinomTest(cds_IP_w0,"IP",'mock')
head(res_IP_w0)
plotMA(res)
plotMA(res_IP)
plotMA(res_IP_w0)
hist(res_IP$pval,breaks=100,col='skyblue',border='slateblue',main="")
hist(res_IP_w0$pval,breaks=100,col='skyblue',border='slateblue',main="")
?padj
?p.adj
?p.adjust
resSig_IP_w0<-res[res$padj<0.1]
resSig_IP_w0<-res[res$padj<0.1,]
resSig_IP_w0
resSig_IP_w0<-res[res_IP_w0$padj<0.1,]
resSig_IP_w0
head(resSig_IP_w0[order(resSig_IP_w0$pval,)])
head(resSig_IP_w0[order(resSig_IP_w0$pval),])
resSig_IP_w0<-res[res_IP_w0$padj<0.1,]
head(resSig_IP_w0[order(resSig_IP_w0$pval),])
resSig_IP_w0<-res_IP_w0[res_IP_w0$padj<0.1,]
head(resSig_IP_w0[order(resSig_IP_w0$pval),])
resSig_IP<-res_IP_w0[res_IP$padj<0.1,]
head(resSig_IP[order(resSig_IP$pval),])
resSig_IP<-res_IP[res_IP$padj<0.1,]
head(resSig_IP[order(resSig_IP$pval),])
new_complete_data_set<-round(complete_data_set[c(1,2,3,4,5,6)])
new_complete_data_set_w0<-new_complete_data_set-1
head(new_complete_data_set)
head(new_complete_data_set_w0)
new_complete_data_set2<-round(complete_data_set[c(1,2,5,6,3,4)])
ncu = counts( cds, normalized=TRUE )[ , conditions(cds)=="untreated" ]
plotMA(data.frame(baseMean = rowMeans(ncu),
+ log2FoldChange = log2( ncu[,2] / ncu[,1] )),
+ col = "black")
plotMA(data.frame(baseMean = rowMeans(ncu),
log2FoldChange = log2( ncu[,2] / ncu[,1] )),
col = "black")
plotMA(data.frame(baseMean = rowMeans(ncu),log2FoldChange = log2( ncu[,2] / ncu[,1] )),col = "black")
pData
?pData
pData(cds_IP)
fitInfo(cds)
head(fitInfo(cds))
fitInfo(cds)$perGeneDispEsts
?sign
source("http://bioconductor.org/biocLite.R")
biocLite("genefilter")
library(edgeR)
source("http://bioconductor.org/biocLite.R")
biocLite('edgeR')
source('~/.active-rstudio-document')
library(edgeR)
library(ggplot2)
#source("http://bioconductor.org/biocLite.R")
#biocLite('DESeq')
library(DESeq)
complete_data_set<-read.table(file="/Volumes/Magdalenas_Bigger_Boy/SEQ_DATA_2011/4_ANALYSIS_2012/5_LOCAL_ANALYSIS_Deep_SEQ_Data_Trop/Analysis/Introns/INTRONS_scatterplots/eff_counts_merged_all_xprs_files_introns_UCSC_10242014.txt", header=TRUE, stringsAsFactors = FALSE)
head(complete_data_set)
new_complete_data_set<-round(complete_data_set[c(1,2,3,4,5,6)])
head(new_complete_data_set)
names(new_complete_data_set)
#[1] "eff_counts_input1" "eff_counts_input2" "eff_counts_IP1"    "eff_counts_IP2"
deSeq_dataset<-newCountDataSet(new_complete_data_set[c(5,6,3,4)],c('cond1','cond1','cond2','cond2')) #mock 1, mock 2, IP 1, IP 2
deSeq_dataset<-estimateSizeFactors(deSeq_dataset)
deSeq_dataset<-estimateDispersions(deSeq_dataset,method='pooled',fitType='local')
de<-nbinomTest(deSeq_dataset,'cond1','cond2')
plot3<-ggplot()
plot3<-plot3+geom_point(data=de,aes(x=log10(de$baseMeanA),y=log10(de$baseMeanB)),colour=ifelse(de$pval < 0.05 & de$log2FoldChange>0,"red",ifelse(de$pval < 0.05 & de$log2FoldChange<0,'blue',"black")),alpha=0.5)
plot3+labs(title="Intron enrichment in IP fraction",x="log10(Mean effective read count -mock)",y='log10(Mean effective read count - IP)')
plot3mod<-ggplot()
plot3mod<-plot3mod+geom_point(data=de,aes(x=log10(de$baseMeanA),y=log10(de$baseMeanB),colour= de$pval < 0.05 & de$log2FoldChange>0,size = de$pval < 0.05 & de$log2FoldChange>0 ),alpha=0.5)
plot3mod<-plot3mod+scale_color_manual(name='significant',values=setNames(c('red','black'),c(TRUE,FALSE)))
plot3mod<-plot3mod+scale_size_manual(name='significant_2',values=setNames(c(4,2),c(TRUE,FALSE)))
plot3mod+labs(title="Intron enrichment in IP fraction",x="log10(Mean effective read count -mock)",y='log10(Mean effective read count - IP)')
ggsave("/Volumes/Magdalenas_Bigger_Boy/SEQ_DATA_2011/4_ANALYSIS_2012/5_LOCAL_ANALYSIS_Deep_SEQ_Data_Trop/Analysis/Introns/INTRONS_scatterplots/RH_2.png")
1.5*14
460/25
32000/80
3.2e6
3.2e6/2e5
(2e5)/15000
2e5*34
374/80
352/80
2000/2.5
1000/50
1000/10
2.5*342
855*0.2
200/100
200/20
200/800
1000/50
200/20
1.25*75
93.75*10/1000
390+380
7000+770
/16
7770/16
25/0.5
10/50
0.25*342
25/0.5
40/50
100/37
600/37
200/37
237/10
30/0.1
130/300
130*8
1040/300
0.9*800/24
800/30
10-0.08-2-0.4-0.5-0.2
10-0.08-2-5-0.5-0.2
9.25+9.25
9.25+9.25+192.20+2+37
350*0.37
350/37
350+3500
3850/16
3850+3850/16
2000/250
4091/8
25/0.5
460/50
4600/50
200/25
2000/8
50/55
5/50
55/50
50*1.4
50/12
2**5
2**6
64*10
0.08*9
0.2*9
6.82*9
2.2*9
20*1.1
30/5
30-0.4-6-0.2-0.4-20
0.5+0.2+5+2.2+2+0.08
50/12
20/4.1666
20-0.5-4.8-1
20-0.5-4-0.4-0.4-1
20-0.5-4-0.4-0.4-1
20-0.5-4.8-1
vvnv b zxcxzzxxcvbnxzcvbnmvbnerfgrtft5rfwq34eu7i8oy6htyujkm,./m,
30*0.
30*0.6
30*1.3
39-18
1e-12
1e-3
(1e-12)*0.0051
(1e-12)*0.0051*(1e-6)
(1e-12)*0.0051/(1e-6)
(1e-12)*0.0076/(1e-6)
300/8
1528/2001
473/2001
1528/2001/2
chisq.test(c(886,642,441,32),p=c(0.38,0.38,0.12,0.12))
library(ggplot2)
mtcars
head(mtcars)
unique(mtcars$vs)
unique(mtcars$am)
length(mtcars)
dim(mtcars)
names(mtcars)
names(mtcars[,1])
(mtcars[,1])
(mtcars[,1].name)
(name(mtcars[,1]))
?mean
?multiplot
# Multiple plot function
#
# ggplot objects can be passed in ..., or to plotlist (as a list of ggplot objects)
# - cols:   Number of columns in layout
# - layout: A matrix specifying the layout. If present, 'cols' is ignored.
#
# If the layout is something like matrix(c(1,2,3,3), nrow=2, byrow=TRUE),
# then plot 1 will go in the upper left, 2 will go in the upper right, and
# 3 will go all the way across the bottom.
#
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
require(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
?list
list(50)
list()
plot_list=list()
for (i in 1:length(dfo_no_CAT_NUM)){
#print(mean(dfo_no_CAT_NUM[,i],na.rm=TRUE))
[[i]]<-i
}
biocLite()
?biocLite
??biocLite
source("http://bioconductor.org/biocLite.R")
setwd('/Volumes/Magdalena_NEW1/ZOO_DATA/Zoo Data/140924_keynote')
getwd()
################################################################################################
#DATA SETS
#READ-IN DATA
################################################################################################
dir()
list.files('../SEPTEMBER_2014/')
#mitotic_anaphase is the file of interest
meiotic<-read.csv('../SEPTEMBER_2014/meiotic_true.csv',stringsAsFactors=FALSE)
#this has to be narrowed down to
mitotic<-read.csv('../SEPTEMBER_2014/meiotic_false.csv',stringsAsFactors=FALSE)
#mitotic_anaphase<-read.csv('../SEPTEMBER_2014/mitotic_anaphase.csv')
#mitotic_anaphase$organism<-as.character(mitotic_anaphase$organism)
head(meiotic)
original<-read.csv('../SEPTEMBER_2014/original.csv',stringsAsFactors=FALSE)
################################################################################################
names(meiotic)
for (col in names(meiotic)){
print(col)
print(class(meiotic[,col]))
}
meiotic_for_MR<-meiotic
names(meiotic_for_MR)
meiotic_for_MR$astere.to.pole_distance_AVG<-apply(meiotic_for_MR[,c(1,2)],1,mean,rm=TRUE)
names(meiotic_for_MR)
meiotic_for_MR<-meiotic_for_MR[-c(1,2)]
meiotic_for_MR$inner_aster_diameter_AVG<-apply(meiotic_for_MR[,c(13,14)],1,mean,na.rm=TRUE)
to_drop<-c('inner_aster_diameter_1_um',"inner_aster_diameter_2_um")
meiotic_for_MR<-meiotic_for_MR[,!names(meiotic_for_MR) %in% to_drop]
#to_drop %in% names(meiotic_for_MR)
meiotic_for_MR$polar_body_diameter_AVG<-apply(meiotic_for_MR[,c(27,28)],1,mean,na.rm=TRUE)
meiotic_for_MR<-meiotic_for_MR[-c(27,28)]
meiotic_for_MR$outer_aster_diameter_1_um
meiotic_for_MR
names(meiotic_for_MR)
meiotic_for_MR$outer_aster_diameter_AVG<-apply(meiotic_for_MR[,c(23,24),1,mean,na.rm=TRUE])
meiotic_for_MR$outer_aster_diameter_AVG<-apply(meiotic_for_MR[,c(23,24)],1,mean,na.rm=TRUE)
names(meiotic_for_MR)
meiotic_for_MR<-meiotic_for_MR[-c(23,24)]
names(meiotic_for_MR)
names(meiotic_for_MR)
for (col in names(meiotic)){
print(col)
print(class(meiotic[,col]))
}
?grep()
grep('_CAT',names(meiotic_for_MR),value = TRUE)
for (col in names(meiotic_for_MR)){
print(col)
print(class(meiotic_for_MR[,col]))
}
for (col in names(meiotic_for_MR)){
if(class(meiotic_for_MR)=='character'){
print(col)
print(class(meiotic_for_MR[,col]))
}
}
if(class(meiotic_for_MR)=='numericr'){
for(col in names(meiotic_for_MR)){
if(class(meiotic_for_MR)=='numericr'){
print(col)
print(class(meiotic_for_MR[,col]))
}
}
}
for(col in names(meiotic_for_MR)){
if(class(meiotic_for_MR)=='numericr'){
print(col)
print(class(meiotic_for_MR[,col]))
}
}
for(col in names(meiotic_for_MR)){
if(class(meiotic_for_MR)=='numeric'){
print(col)
print(class(meiotic_for_MR[,col]))
}
}
for(col in names(meiotic_for_MR)){
if(class(meiotic_for_MR[,col])=='numeric'){
print(col)
print(class(meiotic_for_MR[,col]))
}
}
